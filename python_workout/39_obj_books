#!/usr/bin/env python3
# Copyright SMAJKO

#Source: https://learning.oreilly.com/library/view/python-workout/9781617295508/

'''Exercise 39
This is a sample of composition, not inheritance
'''
from dataclasses import dataclass                               # trzeba zaimportowac aby dzialalo

                                                    
'''class Book():
    def __init__(self, title, author, price, book_width):
        self.title = title
        self.author = author
        self.price = price
        self.book_width = book_width
'''
@dataclass                                                  # od pythona 3.7 mozna skrocic ten zapis tak
class Book():
    title: str
    author: str
    price: int
    book_width: int
        
class Shelf():
    def __init__(self, max_width):
        self.shelf = []
        self.max_width = max_width
        self.current_shelf_width = 0

    def add_book(self, *new_book):
        for book in new_book:
            if self.current_shelf_width + book.book_width < self.max_width:
                self.shelf.append(book)
            else:
                raise MyCustomError('No space on shelf, create a new one!')

    def total_price(self):
        '''total_price = 0
        for price in self.shelf:
            total_price += price.price
        return total_price
        '''
        return sum(book.price for book in self.shelf)
    
    def has_book(self, searched_title):
        '''       for books in self.shelf:              # klasycznie tak ale ladniej ponizej
            if books.title == searched_title:
                return True
            else:
                return False
        '''
        return any(book.title == searched_title for book in self.shelf)       # funkcja any zwraca true na warunku conajmniej raz spelnionym
    

class MyCustomError(Exception):
    def __init__(self, message="Something went wrong"):
        self.message = Exception


if __name__ == '__main__':

    book1 = Book('Kaczka dziwaczka', 'J.Brzechwa', 120, 1)
    book2 = Book('Sparta', 'Coehlio', 10, 2)
    book3 = Book('Lokomotywa', 'J.Brzechwa', 20, 3)

    shelf1 = Shelf(19)
    try:
        shelf1.add_book(book1, book2)
        print(shelf1.total_price())
        shelf1.add_book(book3)
    except MyCustomError as MCE:
        print("Error:", str(MCE))
    print(shelf1.total_price())
    print(shelf1.has_book('Reksio'))
    print(shelf1.has_book('Kaczka dziwaczka'))



