#!/usr/bin/env python3
# Copyright SMAJKO

#Source: https://learning.oreilly.com/library/view/python-workout/9781617295508/

'''Exercise 39
This is a sample of composition, not inheritance
'''


class Scoop():
    def __init__(self, flavor):
        self.flavor = flavor

    def __repr__(self):                 # method is used to define a string representation of an object, it can be also __str__
        return self.flavor              # otherwise you will see sometibg like this when printing object: <__main__.Scoop object at 0x00000213B2BBD050>

class Bowl():                           # obiekt miska reprezentuje lista galek i pare metod
    def __init__(self):
        self.scoops = []

    def add_to_bowl(self, *new_scoopes):
        for new_scoope in new_scoopes:
            self.scoops.append(new_scoope)

    def print_scoops(self):
        for scoop in self.scoops:
            print(scoop)

    def __repr__(self):                 # mozna jak wyzej przez metode print._scoops albo fajniej tak przez ten generator
        return '\n'.join(scoop.flavor for scoop in self.scoops) # dla obiektu scoop w liscie tworzacej obekt bowl zwroc atrybut obiektu scoop czyli jego flavor
        #return self.scoops
        

lodzik = [Scoop(smak) for smak in ('Wanilia', 'Truskawka', 'Malina')]

a1 = Scoop('Karmel')
b1 = Scoop('Mango')
c1 = Scoop('Vanilla')
b = Bowl()
#b.add_to_bowl(*lodzik)
b.add_to_bowl(a1, b1)
b.print_scoops()
b.add_to_bowl(c1)
print(b)



