#!/usr/bin/env python3
# Copyright SMAJKO

#Source: https://intel.udemy.com/course/programowanie-w-jezyku-python/learn/lecture/15723394?start=0#overview

class Product:
    def __init__(self, name, price):
        self.name = name
        self.price = price

class Electronic(Product):
    
    def __init__(self, name, price, warranty):
        super().__init__(name, price)
        self.warranty = warranty

########################################################
        
class Component:
    def __init__(self, name, weight):
        self.name = name
        self.weight = weight


class Wing(Component):
    def __init__(self, name, weight, span):
        super().__init__(name, weight)
        self.span = span


class Engine(Component):
    def __init__(self, name, weight, power):
        super().__init__(name, weight)
        self.power = power


class Plane:
    def __init__(self, name):
        self.name = name
        self.components = []

    def add_component(self, component):
        self.components.append(component)

    def calculate_weight(self):
        total_weight = 0
        for component in self.components:
            total_weight += component.weight
        return total_weight

    def calculate_power_to_weight_ratio(self):
        total_power = 0
        for component in self.components:
            if isinstance(component, Engine):
                total_power += component.power
        return total_power / self.calculate_weight()

##############################################################
    
class Bike:
    def __init__(self, brand, model, price):
        self.brand = brand
        self.model = model
        self.price = price
    
    def description(self):
        print(f'Bike: {self.brand} {self.model}.')


class MountainBike(Bike):
    def __init__(self, brand, model, price, suspension):
        super().__init__(brand, model, price)
        self.suspension = suspension

    def description(self):
        print(f'MountainBike: {self.brand} {self.model}.')


class RoadBike(Bike):
    def __init__(self, brand, model, price, tire_width):
        super().__init__(brand, model, price)
        self.tire_width = tire_width

    def description(self):
        print(f'RoadBike: {self.brand} {self.model}.')

###############################################################
        
class Weather:
    def __init__(self, city, temp, humidity):
        self.city = city
        self.temp = temp
        self.humidity = humidity

    def report(self):
        return (
            f'The weather in {self.city} is currently:\n'
            f'\t - {self.temp} degrees\n\t - {self.humidity}% humidity'
        )
    
class SunnyWeather(Weather):
    def __init__(self, city, temp, humidity, uv_index):
        super().__init__(city, temp, humidity)
        self.uv_index = uv_index

    def report(self):
        return (
            f'The weather in {self.city} is currently:\n'
            f'\t - {self.temp} degrees\n\t - {self.humidity}% humidity\n'
            '\t - ' 'sunny' if self.uv_index > 60 else 'cloudy'
        )
    
''' A eleganckie rozwiazanie jest takie
    def report(self):
        return super().report() + '\n\t - sunny'

'''

if __name__ == '__main__':
    skrzydlo_lewe = Wing('Left Wing', 1200, 15)
    skrzydlo_prawe = Wing('Right Wing', 1200, 15)
    silnik = Engine('Turbofan Engine', 3500, 20000)

    samolot = Plane('Boeing')
    samolot.add_component(skrzydlo_lewe)
    samolot.add_component(skrzydlo_prawe)
    samolot.add_component(silnik)
    print(samolot.calculate_weight())

    w = SunnyWeather('Warsaw', 23, 60, 80)
    print(w.report())